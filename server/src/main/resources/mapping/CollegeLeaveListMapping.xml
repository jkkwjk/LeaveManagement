<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jkk.leave.mapper.CollegeLeaveListMapper">
  <resultMap id="BaseResultMap" type="com.jkk.leave.entity.DO.ManageLeaveListBaseDO">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="looked" jdbcType="INTEGER" property="looked" />
    <result column="allow" jdbcType="INTEGER" property="allow" />
  </resultMap>
  <sql id="Base_Column_List">
    id, looked, allow
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from college_leave_list
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from college_leave_list
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.jkk.leave.entity.DO.ManageLeaveListBaseDO">
    insert into college_leave_list (id, looked, allow)
    values (#{id,jdbcType=INTEGER}, #{looked,jdbcType=INTEGER}, #{allow,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.jkk.leave.entity.DO.ManageLeaveListBaseDO">
    insert into college_leave_list
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="looked != null">
        looked,
      </if>
      <if test="allow != null">
        allow,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="looked != null">
        #{looked,jdbcType=INTEGER},
      </if>
      <if test="allow != null">
        #{allow,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.jkk.leave.entity.DO.ManageLeaveListBaseDO">
    update college_leave_list
    <set>
      <if test="looked != null">
        looked = #{looked,jdbcType=INTEGER},
      </if>
      <if test="allow != null">
        allow = #{allow,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jkk.leave.entity.DO.ManageLeaveListBaseDO">
    update college_leave_list
    set looked = #{looked,jdbcType=INTEGER},
      allow = #{allow,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <resultMap id="MainResultMap" type="com.jkk.leave.entity.POJO.ManageLeaveList">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="looked" jdbcType="INTEGER" property="looked" />
    <result column="allow" jdbcType="INTEGER" property="allow" />

    <result column="send_time" jdbcType="BIGINT" property="sendTime" />
    <result column="start_time" jdbcType="BIGINT" property="startTime" />
    <result column="end_time" jdbcType="BIGINT" property="endTime" />
    <result column="stu_id" jdbcType="INTEGER" property="studentId" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="detail" jdbcType="VARCHAR" property="detail" />
  </resultMap>
  <sql id="allDO">
    college_leave_list as co, leave_list as l
  </sql>

  <select id="selectCustom" resultMap="MainResultMap">
    select
    l.*,co.looked,co.allow
    from <include refid="allDO" />
    where co.id = l.id
    <if test="filters != null and filters.map != null">
      <foreach collection="filters.map.entrySet()" separator=" and " open=" and " item="value" index="key">
        <foreach collection="value" item="item" separator=" or " open="(" close=")">
          <if test="key == 'status'">
            co.allow <if test="item == 'null'">is null</if> <if test="item != 'null'">=#{item}</if>
          </if>
          <if test="key != 'status'">
            l.${key} = #{item}
          </if>
        </foreach>
      </foreach>
    </if>

    <if test="sorter != null">
      <if test="sorter.prop == 'status'">
        order by co.allow <if test="sorter.desc == 1"> DESC </if>
      </if>
      <if test="sorter.prop != 'status'">
        order by l.${sorter.prop} <if test="sorter.desc == 1"> DESC </if>
      </if>
    </if>
  </select>
  <select id="selectArchive" resultMap="MainResultMap">
    SELECT l.*,co.looked,co.allow
    from <include refid="allDO" />
    where co.id = l.id and co.allow is not null
    and NOT ( (l.end_time &lt; #{start_time} OR l.start_time &gt; #{end_time}) )
  </select>

  <!-- 将获得全校的数据, 包括辅导员拒绝的数据 不包括未发送的 -->
  <select id="getCountBetweenTime" resultType="java.lang.Integer">
    SELECT count(id) from leave_list
    WHERE send_time &lt; #{end_time} and send_time &gt; #{start_time} and send_time is not null
  </select>
  <select id="getMapChartBetWeenTime" resultType="com.jkk.leave.entity.POJO.ChartMap">
    SELECT s.area as 'position', count(s.area) as 'leaveNum'
    from leave_list as l, student_info as s
    where l.send_time is not null
    <if test="start_time != null and end_time != null">
      and l.send_time &lt; #{end_time} and l.send_time &gt; #{start_time}
    </if>
    and s.id = l.stu_id GROUP BY s.area;
  </select>
  <select id="getNumChartBetWeenTime" resultType="com.jkk.leave.entity.DO.ChartNumDO">
    SELECT select1.`week`,select1.type,count(select1.`week`) as num from
    (
    SELECT date_format(from_unixtime(l.send_time/1000),'%w') as 'week', l.type from leave_list as l
    where l.send_time is not null
    <if test="start_time != null and end_time != null">
      and l.send_time &lt; #{end_time} and l.send_time &gt; #{start_time}
    </if>
    )
    as select1 GROUP BY select1.`week`,select1.type
  </select>


</mapper>